/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package TemaTest;

import java.util.Comparator;

public class App {
    private static Database acsBook = new Database();
    public App() {
    }
    //region 1 ------------------------ Command functions ------------------------
    private static void createUser(String[] args) throws Exception {
        if (args.length == 1  || args[1].charAt(1) != 'u')
            throw new Exception("Please provide username");
        else if (args.length == 2 || args[2].charAt(1) != 'p')
            throw new Exception("Please provide password");
        else if(acsBook.userExists(args[1].substring(4, args[1].length()-1)))
            throw new Exception("User already exists");
        else {
            acsBook.addNewUser(args[1].substring(4, args[1].length()-1), args[2].substring(4, args[2].length()-1));
            System.out.println("{ 'status' : 'ok', 'message' : 'User created successfully'}");
        }
    }
    private static void createPost(String[] args) throws Exception {
        if (args.length == 3 || !args[3].substring(1,5).equals("text"))        // no text provided
            throw new Exception("No text provided");
        else if (args[3].length() > 308)                                            // text has over 300 characters
            throw new Exception("Post text length exceeded");
        else {
            String text     = args[3].substring(7, args[3].length()-1);
            String userName = args[1].substring(4, args[1].length()-1);

            acsBook.addNewPost(text, acsBook.getUserByName(userName));           // add post into general posts list
            acsBook.getUserByName(userName).addNewPost(acsBook.getPostByID(Post.getNumberOfPosts()));  // add post into user's posts list
            System.out.println("{ 'status' : 'ok', 'message' : 'Post added successfully'}");
        }
    }
    private static void deletePost(String[] args) throws Exception {
        if (!acsBook.postExists(Integer.parseInt(args[3].substring(5, args[3].length()-1)))) // post does not exist
            throw new Exception("The identifier was not valid");
        else {
            int ID = Integer.parseInt(args[3].substring(5, args[3].length()-1));

            acsBook.getPostByID(ID).getOwner().getPostsList().remove(acsBook.getPostByID(ID));
            acsBook.getPostsList().remove(acsBook.getPostByID(ID));

            System.out.println("{ 'status' : 'ok', 'message' : 'Post deleted successfully'}");
        }
    }
    public static void followUser(String[] args) throws Exception{
        if (args.length == 3)
            throw new Exception("No username to follow was provided");
        else if (!acsBook.userExists(args[3].substring(11, args[3].length()-1)) ||
                  acsBook.getUserByName(args[1].substring(4, args[1].length()-1)).isFollowing(args[3].substring(11, args[3].length()-1)))
            throw new Exception("The username to follow was not valid");
        else {
            String user1 = args[1].substring(4, args[1].length()-1);
            String user2 = args[3].substring(11, args[3].length()-1);

            acsBook.getUserByName(user1).addNewFollow(acsBook.getUserByName(user2));
            acsBook.getUserByName(user2).addNewFollower(acsBook.getUserByName(user1));

            System.out.println("{ 'status' : 'ok', 'message' : 'Operation executed successfully'}");
        }
    }
    public static void unfollowUser(String[] args) throws Exception {
        if (args.length == 3)
            throw new Exception("No username to unfollow was provided");
        else if (!acsBook.userExists(args[3].substring(11, args[3].length()-1)) ||
                !acsBook.getUserByName(args[1].substring(4, args[1].length()-1)).isFollowing(args[3].substring(11, args[3].length()-1)))
            throw new Exception("The username to unfollow was not valid");
        else {
            String user1 = args[1].substring(4, args[1].length()-1);
            String user2 = args[3].substring(11, args[3].length()-1);

            acsBook.getUserByName(user1).removeFollow(acsBook.getUserByName(user2));
            acsBook.getUserByName(user2).removeFollower(acsBook.getUserByName(user1));

            System.out.println("{ 'status' : 'ok', 'message' : 'Operation executed successfully'}");
        }
    }
    public static void listUserPosts(String[] args) throws Exception {
        if (args.length == 3)
            throw new Exception("No username to list posts was provided");
        else if (!acsBook.userExists(args[3].substring(11, args[3].length()-1)) ||
                 !acsBook.getUserByName(args[1].substring(4, args[1].length()-1)).isFollowing(args[3].substring(11, args[3].length()-1)))
            throw new Exception("The username to list posts was not valid");
        else {
            User loggedUser = acsBook.getUserByName(args[3].substring(11, args[3].length()-1));
            loggedUser.sortPostsByDate();
            String list = "";
            for (Post i : loggedUser.getPostsList()) {
                list += i.toStringWithoutCommentsNoAndUser() + ",";
            }
            if (list.length() > 1) {
                list = list.substring(0, list.length()-1);
                list += "]";
            }
            System.out.println("{ 'status' : 'ok', 'message' : [" + list + "}");
        }
    }
    public static void commentPost(String[] args) throws Exception {
        if (args.length == 3)
            throw new Exception("No text provided");
        else if (args[4].length() > 308)
            throw new Exception("Comment text length exceeded");
        else {
            String userName = args[1].substring(4, args[1].length()-1);
            String text     = args[4].substring(7, args[4].length()-1);
            int postID      = Integer.parseInt(args[3].substring(10, args[3].length()-1));

            acsBook.getPostByID(postID).addNewComment(new Comment(text, acsBook.getUserByName(userName), acsBook.getPostByID(postID)));
            acsBook.getCommentsList().add(acsBook.getPostByID(postID).getCommentsList().get(Comment.getNumberOfComments()-1));

            System.out.println("{ 'status' : 'ok', 'message' : 'Comment added successfully'}");
        }
    }
    public static void deleteComment(String[] args) throws Exception {
        if (args.length == 3)
            throw new Exception("No identifier was provided");
        else if (!acsBook.commentExists(Integer.parseInt(args[3].substring(5, args[3].length()-1))) ||  // comment does not exist
                 !acsBook.getCommentbyID(Integer.parseInt(args[3].substring(5, args[3].length()-1))).getOwner().getUserName().equals(args[1].substring(4, args[1].length()-1))) // not my best line of code tbh, it checks permission
            throw new Exception("The identifier was not valid");
        else {
            int commentID = Integer.parseInt(args[3].substring(5, args[3].length()-1));

            acsBook.getCommentbyID(commentID).getCommentedPost().removeComment(acsBook.getCommentbyID(commentID));
            acsBook.getCommentsList().remove(acsBook.getCommentbyID(commentID));

            System.out.println("{ 'status' : 'ok', 'message' : 'Operation executed successfully'}");
        }
    }
    public static void printFollowing(String[] args) {
            System.out.println("{ 'status' : 'ok', 'message' : " + acsBook.getUserByName(args[1].substring(4,args[1].length()-1)).followingToString()+ "}");
    }
    public static void printFollowers(String[] args) throws Exception {
        if (args.length == 3)
            throw new Exception("No username to list followers was provided");
        else if (!acsBook.userExists(args[3].substring(11, args[3].length()-1)))
            throw new Exception("The username to list followers was not valid");
        else {
            System.out.println("{ 'status' : 'ok', 'message' : " + acsBook.getUserByName(args[1].substring(4,args[1].length()-1)).followersToString()+ "}");
        }
    }
    public static void mostCommentedPosts() {
        acsBook.getPostsList().sort(Comparator.comparingInt(Post::getPostsNumberOfComments).reversed());
        System.out.println("{ 'status' : 'ok', 'message' : " + acsBook.top5PostsToStringByNoOfComments()+ "}");
    }
    public static void mostFollowedUsers(){
        acsBook.getUsersList().sort(Comparator.comparingInt(User::getNumberOfFollowers).reversed());
        System.out.println("{ 'status' : 'ok', 'message' : " + acsBook.top5UsersToString()+ "}");
    }
    public static void mostLikedPost() {
        acsBook.getPostsList().sort(Comparator.comparingInt(Post::getNumberOfLikes).reversed());
        System.out.println("{ 'status' : 'ok', 'message' : " + acsBook.top5PostsToStringByNoOfLikes()+ "}");
    }
    public static void mostLikedUser() {
        acsBook.getUsersList().sort(Comparator.comparingInt(User::getTotalNumberOfLikes).reversed());
        System.out.println("{ 'status' : 'ok', 'message' : " + acsBook.top5UsersByNoOfLikesToString()+ "}");
    }
    public static void printFollowingsPosts(String[] args) {
        User loggedUser = acsBook.getUserByName(args[1].substring(4, args[1].length()-1));
        acsBook.sortPostsByDate();
        System.out.println("{ 'status' : 'ok', 'message' : " + loggedUser.followingsPostsToString()+ "}");
    }
    public static void printPost(String[] args) throws Exception {
        if (args.length == 3)
            throw new Exception("No post identifier was provided");
        else {
            int postID = Integer.parseInt(args[3].substring(10, args[3].length()-1));
            User user = acsBook.getUserByName(args[1].substring(4, args[1].length()-1));

            if (!acsBook.postExists(postID) || (!user.isFollowing(acsBook.getPostByID(postID).getOwner().getUserName()) && !user.getPostsList().contains(acsBook.getPostByID(postID))))
                throw new Exception("The post identifier was not valid");
            else {
                System.out.println("{ 'status' : 'ok', 'message' : " + acsBook.getPostByID(postID).toStringButInAnotherFkdOrderCuzWhyNotCreateAConsistentFormatWhenUMakeTests()+ "}");
            }
        }
    }
    public static void likePost(String[] args) throws Exception{
        if (args.length == 3)
            throw new Exception("No post identifier to like was provided");
        else {
            int postID = Integer.parseInt(args[3].substring(10, args[3].length()-1));
            User user = acsBook.getUserByName(args[1].substring(4, args[1].length()-1));

            if (!acsBook.postExists(postID) || acsBook.getPostByID(postID).isOwnedByUser(user) || acsBook.getPostByID(postID).isLikedByUser(user))
                throw new Exception("The post identifier to like was not valid");
            else {
                user.getLikedPostsList().add(acsBook.getPostByID(postID));
                acsBook.getPostByID(postID).incNumberOfLikes(true);
                System.out.println("{ 'status' : 'ok', 'message' : 'Operation executed successfully'}");
            }
        }
    }
    public static void unlikePost(String[] args) throws Exception {
        if (args.length == 3)
            throw new Exception("No post identifier to unlike was provided");
        else {
            int postID = Integer.parseInt(args[3].substring(10, args[3].length()-1));
            User user = acsBook.getUserByName(args[1].substring(4, args[1].length()-1));

            if (!acsBook.postExists(postID) || acsBook.getPostByID(postID).isOwnedByUser(user) || !acsBook.getPostByID(postID).isLikedByUser(user))
                throw new Exception("The post identifier to unlike was not valid");
            else {
                user.getLikedPostsList().remove(acsBook.getPostByID(postID));
                acsBook.getPostByID(postID).incNumberOfLikes(false);
                System.out.println("{ 'status' : 'ok', 'message' : 'Operation executed successfully'}");
            }
        }
    }
    public static void likeComment(String[] args) throws Exception {
        if (args.length == 3)
            throw new Exception("No comment identifier to like was provided");
        else {
            int commentID = Integer.parseInt(args[3].substring(13, args[3].length()-1));
            User user = acsBook.getUserByName(args[1].substring(4, args[1].length()-1));

            if (!acsBook.commentExists(commentID) || acsBook.getCommentbyID(commentID).isOwnedByUser(user) || acsBook.getCommentbyID(commentID).isLikedByUser(user))
                throw new Exception("The comment identifier to like was not valid");
            else {
                user.getLikedCommentList().add(acsBook.getCommentbyID(commentID));
                acsBook.getCommentbyID(commentID).incNumberOfLikes(true);
                System.out.println("{ 'status' : 'ok', 'message' : 'Operation executed successfully'}");
            }
        }
    }
    public static void unlikeComment(String[] args) throws Exception {
        if (args.length == 3)
            throw new Exception("No comment identifier to unlike was provided");
        else {
            int commentID = Integer.parseInt(args[3].substring(13, args[3].length()-1));
            User user = acsBook.getUserByName(args[1].substring(4, args[1].length()-1));

            if (!acsBook.commentExists(commentID) || acsBook.getCommentbyID(commentID).isOwnedByUser(user) || !acsBook.getCommentbyID(commentID).isLikedByUser(user))
                throw new Exception("The comment identifier to unlike was not valid");
            else {
                user.getLikedCommentList().add(acsBook.getCommentbyID(commentID));
                acsBook.getCommentbyID(commentID).incNumberOfLikes(false);
                System.out.println("{ 'status' : 'ok', 'message' : 'Operation executed successfully'}");
            }
        }
    }

    //endregion

    //region 2 ------------------------ Auxiliary functions ------------------------

    public static Database getAcsBook() {
        return acsBook;
    }
    public static void checkCredentials(String[] args) throws Exception {
        if (args.length < 3)                                                        // no credentials provided
            throw new Exception("You need to be authenticated");
        else if (args[1].charAt(1) != 'u' || args[2].charAt(1) != 'p')              // idem
            throw new Exception("You need to be authenticated");
        else if (!acsBook.userExists(args[1].substring(4, args[1].length()-1)) ||   // user does not exists (can't login)
                !acsBook.getPasswordOfUser(args[1].substring(4, args[1].length()-1)).equals(args[2].substring(4, args[2].length()-1)))      // password doesn't match
            throw new Exception("Login failed");
    }
    public static void cleanup() {
        for (User i : acsBook.getUsersList()) {
            i.getFollowing().clear();
            i.getFollowers().clear();
            i.getLikedPostsList().clear();
            i.getLikedCommentList().clear();
        }
        for (Post i : acsBook.getPostsList()) {
            i.getCommentsList().clear();
        }
        acsBook.getUsersList().clear();
        acsBook.getPostsList().clear();
        acsBook.getCommentsList().clear();
        Post.setNumberOfPosts(0);
        Comment.setNumberOfComments(0);
        System.out.println("{ 'status' : 'ok', 'message' : 'Cleanup finished successfully'}");

    }
    public static void throwException(Exception e) {
        System.out.println("{ 'status' : 'error', 'message' : '" + e.getMessage() + "'}");
    }
    //endregion
    public static void main(java.lang.String[] args) {
        if (args == null || args.length == 0) {
            System.out.print("Hello world!");
            return;
        }                                 // 0. dummy test
        if (args[0].equals("-cleanup-all")) {
            cleanup();
            return;
        }                                   // 21. cleanup all
        if (args[0].equals("-create-user")) {
            try {
                createUser(args);
            }
            catch (Exception e) {
                throwException(e);
            }
            return;
        }                                   // 1.  create user
        try {
            checkCredentials(args);
            switch (args[0]) {
                case "-create-post": {createPost(args); break;}                     // 2.  create post
                case "-delete-post-by-id": {deletePost(args); break;}               // 3.  delete post
                case "-follow-user-by-username": {followUser(args); break;}         // 4.  follow user
                case "-unfollow-user-by-username": {unfollowUser(args); break;}     // 5.  unfollow user
                case "-like-post": {likePost(args); break;}                         // 6.  like post
                case "-unlike-post": {unlikePost(args); break;}                     // 7.  unlike post
                case "-like-comment": {likeComment(args); break;}                   // 8.  like comment
                case "-unlike-comment": {unlikeComment(args); break;}               // 9.  unlike comment
                case "-get-followings-posts": {printFollowingsPosts(args); break;}  // 10. get followings posts list
                case "-get-user-posts": {listUserPosts(args); break;}               // 11. list posts of user, sorted by date
                case "-get-post-details": {printPost(args); break;}                 // 12. list post details
                case "-comment-post": {commentPost(args); break;}                   // 13. comment post
                case "-delete-comment-by-id": {deleteComment(args); break;}         // 14. delete comment
                case "-get-following": {printFollowing(args); break;}               // 15. get following list
                case "-get-followers": {printFollowers(args); break;}               // 16. get followers list
                case "-get-most-liked-posts": {mostLikedPost(); break;}             // 17. get top 5 most liked posts
                case "-get-most-commented-posts": {mostCommentedPosts(); break;}    // 18. get top 5 most commented posts
                case "-get-most-followed-users": {mostFollowedUsers(); break;}      // 19. get top 5 most followed users
                case "-get-most-liked-users": {mostLikedUser(); break;}             // 20. get top 5 most liked users
            }
        }
        catch (Exception e) {
            throwException(e);
        }
    }
}